{"ast":null,"code":"import { getUserLogin } from \"../../../service/api\";\nimport { setStore } from \"../../../components/config/mUtils\";\nconst SET_USER_INFO = \"SET_USER_INFO\"; //获取后端返回的数据(获取的是字符串,转成对象)\n\nconst userInfo = JSON.parse(localStorage.getItem(\"userInfo\")); //设置默认的数据\n\nconst defaultState = {\n  avater: userInfo && userInfo.avater || \"\",\n  nickname: userInfo && userInfo.nickname || \"\",\n  uid: userInfo && userInfo.uid || \"\",\n  authToke: userInfo && userInfo.authToke || \"\",\n  userState: userInfo && userInfo.useState || 0\n};\nexport default ((state = defaultState, action) => {\n  switch (action.type) {\n    case SET_USER_INFO:\n      return action.data;\n\n    default:\n      return state;\n  }\n}); //修改数据\n\nconst setUserInfo = data => ({\n  type: SET_USER_INFO,\n  data\n});\n\nexport const getUserInfo = userInfo => {\n  return dispatch => {\n    //调用后端的接口\n    getUserLogin(userInfo).then(res => {\n      //当数据调取成功之后,对数据进行修改,并将从后端返回的数据传到setUserInfo\n      dispatch(setUserInfo(res.data)); //当数据获取成功之后,进行本地缓存\n\n      console.log(res.data.nickname);\n      console.log(userInfo.remember);\n\n      if (userInfo.remember) {\n        //如果登录时,用户选择了记住密码,则进行永久存储\n        localStorage.setItem(\"username\", JSON.stringify(res.data.nickname));\n\n        function fn(cfn) {\n          localStorage.setItem(\"username\", JSON.stringify(res.data.nickname));\n          cfn();\n        }\n\n        function cfn() {\n          this.props.history.push(\"/profile\");\n        }\n\n        fn();\n      } else {\n        sessionStorage.setItem(\"username\", JSON.stringify(res.data.nickname));\n      }\n    });\n  };\n};","map":{"version":3,"sources":["F:/HTML5/H5-1920/第三阶段/elm-/elm/src/pages/login/reducer/index.js"],"names":["getUserLogin","setStore","SET_USER_INFO","userInfo","JSON","parse","localStorage","getItem","defaultState","avater","nickname","uid","authToke","userState","useState","state","action","type","data","setUserInfo","getUserInfo","dispatch","then","res","console","log","remember","setItem","stringify","fn","cfn","props","history","push","sessionStorage"],"mappings":"AAAA,SAAQA,YAAR,QAA2B,sBAA3B;AACA,SAAQC,QAAR,QAAuB,mCAAvB;AACA,MAAMC,aAAa,GAAG,eAAtB,C,CAEA;;AACA,MAAMC,QAAQ,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAX,CAAjB,C,CAEA;;AACA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,MAAM,EAAEN,QAAQ,IAAEA,QAAQ,CAACM,MAAnB,IAA6B,EADpB;AAEjBC,EAAAA,QAAQ,EAACP,QAAQ,IAAEA,QAAQ,CAACO,QAAnB,IAA+B,EAFvB;AAGjBC,EAAAA,GAAG,EAAER,QAAQ,IAAEA,QAAQ,CAACQ,GAAnB,IAA0B,EAHd;AAIjBC,EAAAA,QAAQ,EAAET,QAAQ,IAAEA,QAAQ,CAACS,QAAnB,IAA8B,EAJvB;AAKjBC,EAAAA,SAAS,EAACV,QAAQ,IAAEA,QAAQ,CAACW,QAAnB,IAA+B;AALxB,CAArB;AAQA,gBAAc,CAACC,KAAK,GAAGP,YAAT,EAAsBQ,MAAtB,KAA+B;AACzC,UAAOA,MAAM,CAACC,IAAd;AACI,SAAKf,aAAL;AACI,aAAOc,MAAM,CAACE,IAAd;;AACJ;AACI,aAAOH,KAAP;AAJR;AAMH,CAPD,E,CASA;;AACA,MAAMI,WAAW,GAAID,IAAD,KAAS;AACzBD,EAAAA,IAAI,EAACf,aADoB;AAEzBgB,EAAAA;AAFyB,CAAT,CAApB;;AAKA,OAAO,MAAME,WAAW,GAAIjB,QAAD,IAAY;AACnC,SAAOkB,QAAD,IAAY;AACd;AACArB,IAAAA,YAAY,CAACG,QAAD,CAAZ,CAAuBmB,IAAvB,CAA4BC,GAAG,IAAE;AAC7B;AACAF,MAAAA,QAAQ,CAACF,WAAW,CAACI,GAAG,CAACL,IAAL,CAAZ,CAAR,CAF6B,CAG7B;;AACAM,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAG,CAACL,IAAJ,CAASR,QAArB;AACAc,MAAAA,OAAO,CAACC,GAAR,CAAYtB,QAAQ,CAACuB,QAArB;;AACA,UAAGvB,QAAQ,CAACuB,QAAZ,EAAqB;AACjB;AACApB,QAAAA,YAAY,CAACqB,OAAb,CAAqB,UAArB,EAAgCvB,IAAI,CAACwB,SAAL,CAAeL,GAAG,CAACL,IAAJ,CAASR,QAAxB,CAAhC;;AAGA,iBAASmB,EAAT,CAAYC,GAAZ,EAAgB;AACZxB,UAAAA,YAAY,CAACqB,OAAb,CAAqB,UAArB,EAAgCvB,IAAI,CAACwB,SAAL,CAAeL,GAAG,CAACL,IAAJ,CAASR,QAAxB,CAAhC;AACAoB,UAAAA,GAAG;AACN;;AACD,iBAASA,GAAT,GAAc;AACV,eAAKC,KAAL,CAAWC,OAAX,CAAmBC,IAAnB,CAAwB,UAAxB;AACH;;AACDJ,QAAAA,EAAE;AAEL,OAdD,MAcK;AACDK,QAAAA,cAAc,CAACP,OAAf,CAAuB,UAAvB,EAAkCvB,IAAI,CAACwB,SAAL,CAAeL,GAAG,CAACL,IAAJ,CAASR,QAAxB,CAAlC;AACH;AACJ,KAvBD;AAwBH,GA1BD;AA2BH,CA5BM","sourcesContent":["import {getUserLogin} from \"../../../service/api\"\r\nimport {setStore} from \"../../../components/config/mUtils\"\r\nconst SET_USER_INFO = \"SET_USER_INFO\"\r\n\r\n//获取后端返回的数据(获取的是字符串,转成对象)\r\nconst userInfo = JSON.parse(localStorage.getItem(\"userInfo\"))\r\n\r\n//设置默认的数据\r\nconst defaultState = {\r\n    avater: userInfo&&userInfo.avater || \"\",\r\n    nickname:userInfo&&userInfo.nickname || \"\",\r\n    uid: userInfo&&userInfo.uid || \"\",\r\n    authToke: userInfo&&userInfo.authToke ||\"\",\r\n    userState:userInfo&&userInfo.useState || 0 \r\n}\r\n\r\nexport default(state = defaultState,action)=>{\r\n    switch(action.type){\r\n        case SET_USER_INFO:\r\n            return action.data\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//修改数据\r\nconst setUserInfo = (data)=>({\r\n    type:SET_USER_INFO,\r\n    data,\r\n})\r\n\r\nexport const getUserInfo = (userInfo)=>{\r\n    return(dispatch)=>{\r\n        //调用后端的接口\r\n        getUserLogin(userInfo).then(res=>{\r\n            //当数据调取成功之后,对数据进行修改,并将从后端返回的数据传到setUserInfo\r\n            dispatch(setUserInfo(res.data))\r\n            //当数据获取成功之后,进行本地缓存\r\n            console.log(res.data.nickname)\r\n            console.log(userInfo.remember)\r\n            if(userInfo.remember){\r\n                //如果登录时,用户选择了记住密码,则进行永久存储\r\n                localStorage.setItem(\"username\",JSON.stringify(res.data.nickname))\r\n\r\n\r\n                function fn(cfn){\r\n                    localStorage.setItem(\"username\",JSON.stringify(res.data.nickname))\r\n                    cfn()\r\n                }\r\n                function cfn(){\r\n                    this.props.history.push(\"/profile\")\r\n                }\r\n                fn()\r\n               \r\n            }else{\r\n                sessionStorage.setItem(\"username\",JSON.stringify(res.data.nickname))\r\n            }\r\n        })\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}